{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar PINF = require( '@stdlib/constants-float64-pinf' );\nvar NINF = require( '@stdlib/constants-float64-ninf' );\n\n\n// MAIN //\n\n/**\n* Revives a JSON-serialized number.\n*\n* @param {string} key - key\n* @param {*} value - value\n* @returns {*} revived value\n*\n* @example\n* var parseJSON = require( '@stdlib/utils-parse-json' );\n*\n* var str = '{\"type\":\"float64\",\"value\":\"NaN\"}';\n*\n* var v = parseJSON( str, reviver );\n* // returns NaN\n*/\nfunction reviver( key, value ) {\n\tif (\n\t\tvalue !== null &&\n\t\ttypeof value === 'object' &&\n\t\tvalue.type === 'float64'\n\t) {\n\t\tif ( value.value === 'NaN' ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( value.value === '+Infinity' ) {\n\t\t\treturn PINF;\n\t\t}\n\t\tif ( value.value === '-Infinity' ) {\n\t\t\treturn NINF;\n\t\t}\n\t}\n\treturn value;\n}\n\n\n// EXPORTS //\n\nmodule.exports = reviver;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Revive a JSON-serialized number.\n*\n* @module @stdlib/number-float64-reviver\n*\n* @example\n* var parseJSON = require( '@stdlib/utils-parse-json' );\n* var reviveNumber = require( '@stdlib/number-float64-reviver' );\n*\n* var str = '{\"type\":\"float64\",\"value\":\"NaN\"}';\n*\n* var out = parseJSON( str, reviveNumber );\n* // returns NaN\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAO,QAAS,gCAAiC,EACjDC,EAAO,QAAS,gCAAiC,EAoBrD,SAASC,EAASC,EAAKC,EAAQ,CAC9B,GACCA,IAAU,MACV,OAAOA,GAAU,UACjBA,EAAM,OAAS,UACd,CACD,GAAKA,EAAM,QAAU,MACpB,MAAO,KAER,GAAKA,EAAM,QAAU,YACpB,OAAOJ,EAER,GAAKI,EAAM,QAAU,YACpB,OAAOH,CAET,CACA,OAAOG,CACR,CAKAL,EAAO,QAAUG,IC5BjB,IAAIG,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_main", "__commonJSMin", "exports", "module", "PINF", "NINF", "reviver", "key", "value", "main"]
}
